// Transition mixin
// Add CSS transition to any element
@mixin transition($transition...) {
    -webkit-transition: $transition;
    -moz-transition: $transition;
    -o-transition: $transition;
    -ms-transition: $transition;
    transition: $transition;
}

// Animation mixin
// Animate an element
@mixin animation($animation...) {
    -webkit-animation: $animation;
    -moz-animation: $animation;
    -o-animation: $animation;
    animation: $animation;
}

@mixin transform-origin( $val1, $val2 ) {
    -webkit-transform-origin: $val1 $val2;
    -moz-transform-origin: $val1 $val2;
    -o-transform-origin: $val1 $val2;
    transform-origin: $val1 $val2;
}

@mixin transform( $transform ) {
    -webkit-transform: $transform;
    -moz-transform: $transform;
    -o-transform: $transform;
    transform: $transform;
}

// Box shadow mixin
// Add box shadow to any element
@mixin box-shadow($shadows...) {
    -webkit-box-shadow: $shadows;
    -moz-box-shadow: $shadows;
    box-shadow: $shadows;
}

// Inset box shadow mixin 
// Add inset box shadow to any element
@mixin inset-box-shadow($x, $y, $blur, $color) {
    -webkit-box-shadow: inset $x $y $blur $color;
    -moz-box-shadow: inset $x $y $blur $color;
    box-shadow: inset $x $y $blur $color;
}

// Border mixin
// Add a border to any element 
@mixin border($width, $style, $color) {
    border: $width $style $color;
}

// Border radius mixin
// Add border radius to an element
@mixin border-radius($radius) {
    -webkit-border-radius: $radius;
    -moz-border-radius: $radius;
    border-radius: $radius;
}

// Edge border radius mixin 
// Add border radius to a specifix edge(left/right) of an element
@mixin border-radius-edge($edge, $radius) {
    @if $edge == 'right' {
        border-top-right-radius: $radius;
        border-bottom-right-radius: $radius;
    }
    @else if $edge == 'left' {
        border-top-left-radius: $radius;
        border-bottom-left-radius: $radius;
    }
}

// Clearfix hack mixin
// Add clearfix hack - to contain floats within containers
@mixin clearfix {
    &:before,
    &:after {
        content: "";
        clear: both;
        display: table;
    }
}
 
// Background Opacity mixin
// Add opacity to a background color
@mixin backgroundOpacity($color, $opacity) {
    background-color: rgba($color, $opacity);
}

// Background linear gradient mixin
// Add a linear gradient to any element's background
@mixin linearGradient($gradientValues...) {
	background: -webkit-linear-gradient($gradientValues);
	background: -moz-linear-gradient($gradientValues);
	background: -o-linear-gradient($gradientValues);
	background: linear-gradient($gradientValues);
}

// Background repeating linear gradient mixin
// Add a repeating linear gradient to any element's background
@mixin repeatingLinearGradient($gradientValues...) {
	background: -webkit-repeating-linear-gradient($gradientValues);
	background: -moz-repeating-linear-gradient($gradientValues);
	background: -o-repeating-linear-gradient($gradientValues);
	background: repeating-linear-gradient($gradientValues);
}

// Background radial gradient mixin
// Add a radial gradient to any element's background
@mixin radialGradient($gradientValues...) {
	background: -webkit-radial-gradient($gradientValues);
	background: -o-radial-gradient($gradientValues);
	background: -moz-radial-gradient($gradientValues);
	background: radial-gradient($gradientValues);
}

// Background repeating radial gradient mixin
// Add a repeating radial gradient to any element's background
@mixin repeatingRadialGradient($gradientValues...) {
	background: -webkit-repeating-radial-gradient($gradientValues);
	background: -o-repeating-radial-gradient($gradientValues);
	background: -moz-repeating-radial-gradient($gradientValues);
	background: repeating-radial-gradient($gradientValues);
}

// Scale transform mixin
// Scale an element
@mixin scale($x, $y: 0) {
	@if $y != 0 {
	 	-webkit-transform: scale($x, $y);
		-moz-transform: scale($x, $y);
		-o-transform: scale($x, $y);
		-ms-transform: scale($x, $y);
		transform: scale($x, $y);
	}
	@else {
		-webkit-transform: scale($x, $x);
		-moz-transform: scale($x, $x);
		-o-transform: scale($x, $x);
		-ms-transform: scale($x, $x);
		transform: scale($x, $x);
	}
}

// Translate transform mixin
// Translate an element
@mixin translate($x, $y: 0) {
	-webkit-transform: translate($x, $y);
	-moz-transform: translate($x, $y);
	-o-transform: translate($x, $y);
	-ms-transform: translate($x, $y);
	transform: translate($x, $y);
}

// Rotate transform mixin
// Rotate an element
@mixin rotate($deg) {
	-webkit-transform: rotate($deg+deg);
	-moz-transform: rotate($deg+deg);
	-o-transform: rotate($deg+deg);
	-ms-transform: rotate($deg+deg);
	transform: rotate($deg+deg);
	-webkit-backface-visibility: hidden;
}

// Skew transform mixin
// Skew an element
@mixin skew($x, $y: 0) {
	-webkit-transform: skew($x+deg, $y+deg);
	-moz-transform: skew($x+deg, $y+deg);
	-o-transform: skew($x+deg, $y+deg);
	-ms-transform: skew($x+deg, $y+deg);
	transform: skew($x+deg, $y+deg);
	-webkit-backface-visibility: hidden;
}

// Flip transform mixin 
// Flip / mirror an element
@mixin flip {
    -webkit-transform: scaleX(-1);
	-moz-transform: scaleX(-1);
	-o-transform: scaleX(-1);
    transform: scaleX(-1);
    filter: FlipH;
   -ms-filter: "FlipH";
}

// Load Font face mixin
// Load a web-safe font with fallbacks
@mixin fontFace($font) {
	$font: to-lower-case($font);
	// Web safe serif fonts
	@if $font == georgia or $font == palatino or $font == times New Roman or $font == times {
		font-family: $font, serif;
	}
	// Web safe sans-serif fonts
	@else if $font == arial or $font == helvetica or $font == gill sans or $font == impact or $font == lucida grande or $font == tahoma or $font == geneva or $font == verdana {
		font-family: $font, sans-serif;
	}
}

// Cursor pointer mixin
// Add a pointer cursor to the hover state of an element
@mixin cursorPointer {
	&:hover {
		cursor: pointer;
	}
}

// No focus mixin
// Remove focus from a button or input field while in focused state
@mixin noFocus {
	&:focus {
		outline: none;
		box-shadow: none;
	}
}

// User select mixin
// Set user select property for an element
@mixin userSelect($value) {
	-webkit-user-select: $value;
	-moz-user-select: $value;
	-ms-user-select: $value;
} 

// Text select mixin
// Modify css for text selection
@mixin textSelection {
	&::selection {
		@content;
	}
	&::-moz-selection {
		@content;
	}
}

// Placeholder mixin
// Style placeholders within input fields
@mixin placeholder {
	&::-webkit-input-placeholder {
		@content;
	}	
	&:-moz-placeholder {
		@content;
	}
	&::-moz-placeholder {
		@content;
	}
	&:-ms-input-placeholder {
		@content;
	}
} 

// Media query breakpoint values
$largeScreen: 1200px;
$mediumScreen: 992px;
$smallScreen: 768px;
$extraSmallScreen: 480px;
$smallMobile: 320px;

// Large screen media query mixin
// Detect large screens and apply css
@mixin media-l-screen {
	@media screen and (max-width: $largeScreen) {
		& {
			@content
		}
	}
}

// Medium screen media query mixin
// Detect medium screens and apply css
@mixin media-m-screen {
	@media screen and (max-width: $mediumScreen) {
		& {
			@content
		}
	}
}

// Small screen media query mixin
// Detect small screens and apply css
@mixin media-s-screen {
	@media screen and (max-width: $smallScreen) {
		& {
			@content
		}
	}
}

// X-small screen media query mixin
// Detect x-small screens and apply css
@mixin media-xs-screen {
	@media screen and (max-width: $extraSmallScreen) {
		& {
			@content
		}
	}
}

// Small mobile screen media query mixin
// Detect small mobile screens and apply css
@mixin media-s-mobile {
	@media screen and (max-width: $smallMobile) {
		& {
			@content
		}
	}
}

// Hi-res retina screen media query mixin
// Detect retina screen and apply css
@mixin media-retina {
	@media (-webkit-min-device-pixel-ratio: 1.5),
		(min--moz-device-pixel-ratio: 1.5),
		(-o-min-device-pixel-ratio: 3/2),
		(min-device-pixel-ratio: 1.5),
		(min-resolution: 1.5dppx) {
			@content;
	}
}

// Background Image retinize mixin
// Retinize a background image
@mixin retinizeBackground($file, $postfix, $type, $width, $height, $location:'') {
	background-image: url($location+$file+"."+$type);
	@include backgroundSize($width, $height);
	@include media-retina {
		background-image: url($location+$file+$postfix+"."+$type);
		@include backgroundSize($width, $height);
	}
}

// Blur filter mixin
// Blur an element
@mixin blur($value) { 
	-webkit-filter: blur($value); // Add value in px
	filter: blur($value);
}

// Grayscale filter mixin
// Add grayscale filter to an element
@mixin grayscale($value) {
	-webkit-filter: grayscale($value); // Add value in %
	filter: grayscale($value);
}

// Sepia filter mixin
// Add sepia filter to an element
@mixin sepia($value) {
	-webkit-filter: sepia($value); // Add value in %
	filter: sepia($value);
}

// Saturate filter mixin
// Add saturation filter to an element
@mixin saturate($value) { 
	-webkit-filter: saturate($value); //Add value in % or whole number
	filter: saturate($value);
}

// Hue rotate filter mixin
// Rotate hue of an element
@mixin hueRotate($value) { 
	-webkit-filter: hue-rotate($value); //Add value in deg
	filter: hue-rotate($value);
}

// Invert filter mixin
// Invert colors of an element
@mixin invert($value) { 
	-webkit-filter: invert($value); //Add value in %
	filter: invert($value);
}

// Opacity filter mixin
// Set opacity of an element
@mixin opacity($value) { 
	-webkit-filter: opacity($value); //Add value in %
	filter: opacity($value);
}

// Brightness filter mixin
// Set brightness of an element
@mixin brightness($value) { 
	-webkit-filter: brightness($value); //Add value in %
	filter: brightness($value);
}

// Contrast filter mixin
// Set contrast of an element
@mixin contrast($value) { 
	-webkit-filter: contrast($value); //Add value in %
	filter: contrast($value);
}

// Drop shadow filter mixin
// Add drop shadow filter to an element
@mixin dropShadow($value) { 
	-webkit-filter: drop-shadow($value); 
	filter: drop-shadow($value);
}

// Flexbox display
@mixin flexbox() {
  display: -webkit-box;
  display: -moz-box;
  display: -ms-flexbox;
  display: -webkit-flex;
  display: flex;
}

// The 'flex' shorthand
// - applies to: flex items
// <positive-number>, initial, auto, or none
@mixin flex($values) {
  -webkit-box-flex: $values;
     -moz-box-flex: $values;
      -webkit-flex: $values;
  	  -ms-flex: $values;
  	      flex: $values;
}

// Flex Flow Direction
// - applies to: flex containers
// row | row-reverse | column | column-reverse
@mixin flex-direction($direction) {
  -webkit-flex-direction: $direction;
     -moz-flex-direction: $direction;
      -ms-flex-direction: $direction;
          flex-direction: $direction;
}

// Flex Line Wrapping
// - applies to: flex containers
// nowrap | wrap | wrap-reverse
@mixin flex-wrap($wrap) {
  -webkit-flex-wrap: $wrap;
     -moz-flex-wrap: $wrap;
      -ms-flex-wrap: $wrap;
          flex-wrap: $wrap;
}

// Flex Direction and Wrap
// - applies to: flex containers
// <flex-direction> || <flex-wrap>
@mixin flex-flow($flow) {
  -webkit-flex-flow: $flow;
     -moz-flex-flow: $flow;
      -ms-flex-flow: $flow;
          flex-flow: $flow;
}

// Display Order
// - applies to: flex items
// <integer>
@mixin order($val) {
  -webkit-box-ordinal-group: $val;  
     -moz-box-ordinal-group: $val;     
  	     -ms-flex-order: $val;     
  	      -webkit-order: $val;  
  		      order: $val;
}

// Flex grow factor
// - applies to: flex items
// <number>
@mixin flex-grow($grow) {
  -webkit-flex-grow: $grow;
     -moz-flex-grow: $grow;
      -ms-flex-grow: $grow;
          flex-grow: $grow;
}

// Flex shrink
// - applies to: flex item shrink factor
// <number> 
@mixin flex-shrink($shrink) {
  -webkit-flex-shrink: $shrink;
     -moz-flex-shrink: $shrink;
      -ms-flex-shrink: $shrink;
          flex-shrink: $shrink;
}

// Flex basis
// - the initial main size of the flex item
// - applies to: flex itemsnitial main size of the flex item
// <width> 
@mixin flex-basis($width) {
  -webkit-flex-basis: $width;
     -moz-flex-basis: $width;
      -ms-flex-basis: $width;
          flex-basis: $width;
}

// Axis Alignment
// - applies to: flex containers
// flex-start | flex-end | center | space-between | space-around 
@mixin justify-content($justify) {
  -webkit-justify-content: $justify;
     -moz-justify-content: $justify;
      -ms-justify-content: $justify;
          justify-content: $justify;
            -ms-flex-pack: $justify;
}

// Packing Flex Lines
// - applies to: multi-line flex containers
// flex-start | flex-end | center | space-between | space-around | stretch 
@mixin align-content($align) {
  -webkit-align-content: $align;
     -moz-align-content: $align;
      -ms-align-content: $align;
          align-content: $align;
}

// Cross-axis Alignment
// - applies to: flex containers
// flex-start | flex-end | center | baseline | stretch 
@mixin align-items($align) {
  -webkit-align-items: $align;
     -moz-align-items: $align;
      -ms-align-items: $align;
          align-items: $align;
}

// Cross-axis Alignment
// - applies to: flex items
// auto | flex-start | flex-end | center | baseline | stretch 
@mixin align-self($align) {
  -webkit-align-self: $align;
     -moz-align-self: $align;
      -ms-align-self: $align;
          align-self: $align;
}

@mixin font-size($sizeValue: 16, $line: $sizeValue * 1.3) {
    font-size: ($sizeValue) + px;
    line-height: ($line) + px;
    font-size: ($sizeValue / 16) + rem;
    line-height: ($line / 16) + rem;
}